clc;clear all; close all
file_path = 'Users\ mithin\Documents\clg\DL project\ICBHI_final_database\226_1b1_Pl_sc_LittC2SE.wav';
[signal, Fs] = audioread(file_path);

t = linspace(0, length(signal)/Fs, length(signal));

noisy_signal = signal + 0 * randn(size(signal));

wavelet = 'db4';
level = 4;
[coeffs, L] = wavedec(noisy_signal, level, wavelet);

threshold = sqrt(2 * log(length(noisy_signal)));

coeffs_hard = wthcoef('h', coeffs, L, 1:level, threshold);
coeffs_soft = wthcoef('s', coeffs, L, 1:level, threshold);

y_denoised_hard = waverec(coeffs_hard, L, wavelet);
y_denoised_soft = waverec(coeffs_soft, L, wavelet);

power_signal = sum(signal.^2) / length(signal);
power_noise = sum((noisy_signal - signal).^2) / length(noisy_signal);
snr_before = 10 * log10(power_signal / power_noise)

power_noise_hard = sum((y_denoised_hard - signal).^2) / length(y_denoised_hard);
snr_after_hard = 10 * log10(power_signal / power_noise_hard)

power_noise_soft = sum((y_denoised_soft - signal).^2) / length(y_denoised_soft);
snr_after_soft = 10 * log10(power_signal / power_noise_soft)

figure;
subplot(3, 1, 1);
plot(t, noisy_signal);
title(['Noisy signal']);
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3, 1, 2);
plot(t, y_denoised_hard, 'g');
title(['Denoised signal(hard)']);
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3, 1, 3);
plot(t, y_denoised_soft, 'r');
title(['Denoised signal(soft)']);
xlabel('Time (s)');
ylabel('Amplitude');

sgtitle('Wavelet Denoising with SNR Calculation');

%%
clc;clear all; close all;
t = 0:0.01:2*pi;  
signal = sin(t) + 0.5 * randn(size(t));  

n = length(t);  
if mod(n, 2) ~= 0
    t = t(1:end-1);
    signal = signal(1:end-1);
    n = n - 1;  
end

signal_matrix = reshape(signal, [n/2, 2]);

[U, S, V] = svd(signal_matrix);

ranks = [1, 2]; 

for r = ranks
    U_r = U(:, 1:r); 
    S_r = S(1:r, 1:r);  
    V_r = V(:, 1:r); 

    signal_matrix_approx = U_r * S_r * V_r';

    signal_reconstructed = reshape(signal_matrix_approx, [1, n]);

    figure;
    plot(t, signal, 'b', 'LineWidth', 1.5); 
    hold on;
    plot(t, signal_reconstructed, 'r--', 'LineWidth', 1.5);  
    title(['Reconstructed Signal with Rank = ', num2str(r)]);
    xlabel('Time');
    ylabel('Amplitude');
    legend('Original Signal', 'Reconstructed Signal');
    hold off;
end

%%

[u, s, v] = svd([1 1; 1 0; 0 1])